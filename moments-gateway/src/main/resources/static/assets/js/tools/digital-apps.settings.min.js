(function() {

    'use strict';

    DiGital

        .directive('noSpecialChar', function(alertify) {

            return {

                require: 'ngModel',

                restrict: 'A',

                link: function(scope, element, attrs, modelCtrl) {

                    modelCtrl.$parsers.push(function(inputValue) {

                        if (inputValue === undefined) {

                            return '';
                        } else {

                            var cleanInputValue = inputValue.replace(/[^\w\s-.]/gi, '');

                            if (cleanInputValue != inputValue) {

                                modelCtrl.$setViewValue(cleanInputValue);

                                modelCtrl.$render();

                                alertify.alert("Désoler caractère non autorisé pour ce champs.");

                                return;

                            }
                            else {

                                return cleanInputValue;
                            }
                        }
                    });
                }
            };
        })


        .directive("passwordVerify", function() {

            return {

                require: "ngModel",

                scope: {

                    passwordVerify: '='

                },
                link: function(scope, element, attrs, ctrl) {

                    scope.$watch(function() {

                        var combined;

                        if (scope.passwordVerify || ctrl.$viewValue) {

                            combined = scope.passwordVerify + '_' + ctrl.$viewValue;
                        }

                        return combined;

                    }, function(value) {

                        if (value) {

                            ctrl.$parsers.unshift(function(viewValue) {

                                var origin = scope.passwordVerify;

                                if (origin !== viewValue) {

                                    ctrl.$setValidity("passwordVerify", false);

                                    return undefined;

                                }
                                else {

                                    ctrl.$setValidity("passwordVerify", true);

                                    return viewValue;
                                }
                            });
                        }
                    });
                }
            };
        })


        .directive('ngConfirmClick', [function() {

            return {

                link: function(scope, element, attr) {

                    var msg = attr.ngConfirmClick || "Are you sure?";

                    var clickAction = attr.confirmedClick;

                    element.bind('click', function(event) {

                        if (window.confirm(msg)) {

                            scope.$eval(clickAction)
                        }
                    });
                }
            };
        }])


        .directive('ngFocus', ['$parse', function($parse) {

            return function(scope, element, attr) {

                var fn = $parse(attr['ngFocus']);

                element.bind('focus', function(event) {

                    scope.$apply(function() {

                        fn(scope, {$event:event});
                    });
                });
            }
        }])


        .directive('ngEnter', function () {

            return function (scope, element, attrs) {

                element.bind("keydown keypress", function (event) {

                    if (event.which === 13) {

                        scope.$apply(function () {

                            scope.$eval(attrs.ngEnter);

                        });

                        event.preventDefault();
                    }
                });
            };
        })


        .directive('commaseparator', function($filter) {

            'use strict';

            return {

                require: 'ngModel',

                link: function(scope, elem, attrs, ctrl) {

                    if (!ctrl) {

                        return;
                    }
                    ctrl.$formatters.unshift(function() {

                        return $filter('number')(ctrl.$modelValue);

                    });
                    ctrl.$parsers.unshift(function(viewValue) {

                        var plainNumber = viewValue.replace(/[\,\.\-\+]/g, ''),

                            b = $filter('number')(plainNumber);

                        elem.val(b);

                        return plainNumber;
                    });
                }
            };
        })


        .run(['$rootScope', function($rootScope) {

            $rootScope.lang = 'en';
        }])


        .run(['$rootScope', function($rootScope) {

            getUserIP(function(ip){

                $rootScope.addressIp = ip;
            });

        }])

        /*.filter('capitalizeWord', function() {
            return function(text) {
                return (!!text) ? text.charAt(0).toUpperCase() + text.substr(1).toLowerCase() : '';
            }
        })*/
})();


function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs

    /*//compatibility for firefox and chrome
    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;

    var pc = new myPeerConnection({
            iceServers: []
        }),
        noop = function() {},
        localIPs = {},
        ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
        key;

    function iterateIP(ip) {
        if (!localIPs[ip]) onNewIP(ip);
        localIPs[ip] = true;
    }

    //create a bogus data channel
    pc.createDataChannel("");

    // create offer and set local description
    pc.createOffer(function(sdp) {
        sdp.sdp.split('\n').forEach(function(line) {
            if (line.indexOf('candidate') < 0) return;
            line.match(ipRegex).forEach(iterateIP);
        });

        pc.setLocalDescription(sdp, noop, noop);
    }, noop);

    //listen for candidate events
    pc.onicecandidate = function(ice) {
        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
    };*/
}


function limiteur_0(){
    maximum = 5000;
    champ = document.expForm.resumePoste;
    affich = document.expForm.txt0;
    if (champ.value.length > maximum)
        champ.value = champ.value.substring(0, maximum);
    else

        //indic = maximum - champ.value.length;
        affich.value = "("+champ.value.length+" / 5000 caractères restants)";
}


function limiteur_1(){
    maximum = 5000;
    champ = document.expForm.fonctionEssentiel;
    affich = document.expForm.txt1;
    if (champ.value.length > maximum)
        champ.value = champ.value.substring(0, maximum);
    else
        //indic = maximum - champ.value.length;
        affich.value = "("+champ.value.length+" / 5000 caractères restants)";
}
